{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google Remote Procedure Calls (gRPC)","text":"<p>gRPC is a fast, open-source RPC framework for seamless communication between distributed systems.</p> <p>The framework is based on a client-server model of remote procedure calls(RPC). A client application can directly call methods on a server application as if it was a local object/function.</p> <p> </p>"},{"location":"#what-are-remote-procedure-calls-rpc","title":"What are Remote Procedure Calls (RPC)?","text":"<p>It's a communication protocol that simply allows a program on one computer(client-side) to invoke a function on a remote computer(server-side)</p> <p> </p> It simply enables remote function calls that mimic local function calls but execute on remote machines."},{"location":"#what-is-protocol-buffer-protobuf","title":"What is Protocol Buffer (Protobuf)?","text":"<p>Is a language-agnostic binary serialization format developed by Google. It can be used as a data format within RPC implementations.</p> <p> </p>"},{"location":"#what-is-proto-file","title":"What is <code>.proto</code> file?","text":"<p>It's the file where you define your data structures and services using the Protocol Buffers IDL (Interface Definition Language).</p> <pre><code>syntax = \"proto3\";\npackage taskPackage;\n// Request Parameter Definition\nmessage Request {\nstring id = 1;\nstring description = 2;\n}\n// Response Parameter Definition\nmessage Response {\nstring transactionId = 1;\n}\n// Service Definition\nservice TaskService {\nrpc createTask (Request) returns (Response);\n}\n</code></pre> <p>The <code>.proto</code> files act as the blueprint for generating code in different programming languages for working with the defined data structures and services.</p>"},{"location":"#grpc-overall-flow","title":"gRPC Overall Flow","text":""},{"location":"grpc-communication/","title":"gRPC Modes of Communication","text":"<p>gRPC is an inter-process communication technology that makes communication between microservices faster and more efficient. It supports four fundamental communication patterns:</p>"},{"location":"grpc-communication/#unary","title":"Unary","text":"Client sends a single request to the server and waits for a single response."},{"location":"grpc-communication/#server-streaming","title":"Server Streaming","text":"Client sends a request to the server, and the server responds with a stream of messages."},{"location":"grpc-communication/#client-streaming","title":"Client Streaming","text":"Client sends a stream of messages to the server, and the server responds with a single message."},{"location":"grpc-communication/#bidirectional-streaming","title":"Bidirectional Streaming","text":"Both the client and the server to send and receive a stream of messages."}]}